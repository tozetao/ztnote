练习
-------------------------------
用这些系统知识操作一下文件系统，实现一个可以拷贝目录树的小程序。
用 fork / wait / waitpid 写一个多进程的程序，用 pthread 写一个多线程带同步或互斥的程序。比如，多进程购票的程序。
用 signal / kill / raise / alarm / pause / sigprocmask 实现一个多进程间的信号量通信的程序。
学会使用 gcc 和 gdb 来编程和调试程序（参看我的《用 gdb 调试程序》一、二、三、四、五、六、七）。
学会使用 makefile 来编译程序（参看我的《跟我一起写 makefile》一、二、三、四、五、六、七、八、九、十、十一、十二、十三、十四）。
Socket 的进程间通信。用 C 语言写一个 1 对 1 的聊天小程序，或是一个简单的 HTTP 服务器。




实践项目
-------------------------------
实现一个 telnet 版本的聊天服务器，主要有以下需求：
	每个客户端可以用使用telnet ip:port的方式连接到服务器上。
	新连接需要用用户名和密码登录，如果没有，则需要注册一个。
	然后可以选择一个聊天室加入聊天。
	管理员有权创建或删除聊天室，普通人员只有加入、退出、查询聊天室的权力。
	聊天室需要有人数限制，每个人发出来的话，其它所有的人都要能看得到。

实现一个简单的 HTTP 服务器，主要有以下需求：
	解释浏览器传来的 HTTP 协议，只需要处理 URL path。
	然后把所代理的目录列出来。
	在浏览器上可以浏览目录里的文件和下级目录。
	如果点击文件，则把文件打开传给浏览器（浏览器能够自动显示图片、PDF，或 HTML、CSS、JavaScript 以及文本文件）。
	如果点击子目录，则进入到子目录中，并把子目录中的文件列出来。

实现一个生产者 / 消费者消息队列服务，主要有以下需求：
	消息队列采用一个 Ring-buffer 的数据结构。
	可以有多个 topic 供生产者写入消息及消费者取出消息。
	需要支持多个生产者并发写。
	需要支持多个消费者消费消息（只要有一个消费者成功处理消息就可以删除消息）。
	消息队列要做到不丢数据（要把消息持久化下来）。
	能做到性能很高




golang实践
---------------
	聊天系统
	商城系统
