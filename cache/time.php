<?php
/*
1. 页面静态化
	执行动态脚本页面，将该脚本页面生成的内容转换成一个纯静态的html页面，这个就是页面静态化技术。

2. 实现技术原理
	缓存时间
		文件创建时间、文件最后修改时间、自定义缓存时间。
		条件判断：
			当前时间 - 缓存时间 > 文件最后修改时间，改缓存文件过期。
	
	文件内容替换
		可以用一个数组，分别存储要替换的变量。
		读取文件内容，根据数组分别替换变量，写入新文件中，over。

	实现原理
		1. 查询数据，设置变量
		2. 开启缓冲区
		3. 加载php模板文件，填充内容
		4. 获取输出缓冲区的内容，生成html文件。(由于开启了缓冲区，所以输出内容会被存储到缓冲区)
	
3. output buffer(输出缓存)
	buffer其实就是缓冲区，一个内存空间地址，主要用于存储数据区域。
	php的ob缓存可以将输出内容存储到一个内层空间，方便后续调用。

	ob函数
		ob缓存：开启后，可以将输出内容存储到缓冲区中，方便存活和获取。
		ob_start()：开启output缓存。
		ob_get_contents()：返回输出缓冲区内容，并输出给客户端。
		ob_clean：清空输出缓冲区。
		ob_get_clean：获取输出缓冲区内容，并清空，不输出给客户端。
	
	注意：我的php默认开启了ob缓存。

4. 静态页面的实现和触发方式
	4.1 手动触发
		手动触发的方式就是自己手动进行缓存文件的更新。

	4.2 缓存时间
		主要是思路通过是否开启缓存、缓存时间俩个条件因素来判断静态页面的加载，默认的，我们认为开启了缓存：
		首先判断静态页面是否过期，是的话，重新生成缓存文件并加载；否的话，直接加载缓存文件。

		缓存过期判断：
			a. 
				当前时间 - 文件最后修改时间 = 文件存在时间，文件存在时间 > 缓存时间，那么缓存失效。
				条件判断：time() - filemtime('filename') <= cachetime
			b.
				当前时间 - 缓存时间 <= 文件最后修改时间，那么该文件有效。
				举例：
					文件最后修改时间：10.00，缓存：30分钟，存活时间：10.30

					当前时间：10:20
					10:20 - 30分钟 = 9:50
					9.50 < 10.00，该文件有效。

					当前时间：10:35
					10:35 - 30 = 10:05			
					原本是以10.05 < 10.30 进行判断，这是错误的，应该将文件的最后修改时间10.00作为判断边界。

					10.00至10.30是该文件的存活期限，在这段存活期限内的任意时间点，减去缓存时间后得到的的边界都应该小于10.00，超出该边界都是无效的。

					得出公式：当前时间 - 缓存时间 <= 文件最后修改时间，那么该文件有效。
			example：
				//先判断缓存文件是否创建，判断是否缓存过期
				if(is_file('welcome.tpl') && (time()-filemtime('welcome.tpl')) < 10){
					echo 'cache';	
					include('welcome.tpl');
				}else{
					$data = 'welcome';
					include('welcome.html');
					file_put_contents('welcome.tpl', ob_get_contents());//生成静态页面并输出
				}

	4.3 crontab定时扫描
		crontab是linux的一个工具，我们直接调用即可。
		crontab可以定时的触发某个功能或者程序，我们可以用程序进行设置，定时的更新模板。

		crontab由俩部分组成，例如：
		*\/5**** php/data/static/index.php
		第一部分是时区：分钟、小时、日、月、周，*\/5代表每5分钟。
		第二部分是指要执行的代码。
		整段代码是指每5分钟就是执行这段程序。

		注意：我将/转义了，要不然不能注释。

5. 局部动态化
	局部动态化是指生成的静态页面有一部分的数据会动态更新。
	5.1 ajax实现
		生成的静态页面有加载js脚本，当用户触发某个事件，使用ajax来发送请求，实现页面的跟新。

	5.2 局部动态化
		所生成的静态页面，使局部动态化的那部分仍然是php代码。

		第一次生成：
			include('subject.html');	//源模板文件
			$contents = ob_get_clean();	//获取加载的内容并清空缓冲区

			//通过字符串函数，在需要局部动态化的地方插入php代码，你可以给源模板加标记判断。
			$contenst = str_replace('');	

			file_put_contents('static.html',$contents);	//生成静态文件
			select //查询动态内容
			include('static.html');		//加载新的静态文件，完成动态内容更新。
			
		第二次访问：
			查询动态内容，再加载局部动态的静态页面，这时候就实现了局部动态化。

 */

