<?php
/*
1. 创建版本库
	a. 创建文件夹
		mkdir learngit
		cd git
		pwd

	b. 初始化版本库
		git init
	
	c. 将文件提交到版本库中
		git add <file>
		git commit -m '提交说明'
	
	以上3个步骤，便将文件提交给版本库管理了。
	note：
		ls -ah：显示所有文件，包括隐藏的文件。

2. 版本管理
	2.1 状态查看
		git status命令：查看当前仓库的状态，哪些文件被修改过。
		git diff：查看文件被修改的内容
	
	2.2 版本回退
		git log
			查看提交历史，以便确定要回退到哪个版本。

		git log --pretty=oneline
			缩略视图

		git reset --hard commit_id
			将当前分支回退到我们指定的版本，并更新工作区文件。
		
		git reflog
			git reflog查看命令历史，以便确定要回到未来的哪个版本。

		note：
			git的版本号是sha1计算出来的id，是一个十六进制的数字。

			每提交一个新版本，便是一个节点，指针所指向的永远是当前commit的版本，所谓回退版本，便是git将指针指向到指定的节点。
		
			在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
	
	2.3 工作区和暂存区
		工作区就是你电脑的当前目录，比如之前创建的文件learngit就是一个工作区。

		工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
		Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master主分支当前版本的HEAD指针。

		工作原理：
			git add
				将工作区中的文件添加到暂存区
			git commit
				将暂存区中的文件提交到当前分支。

		提交后，如果你没有对工作区的文件进行修改，那么你的工作区就是干净的，同时版本库中的暂存区就没有任何内容了。
	
	2.4 管理修改
		Git是跟踪并管理操作的修改，注意并不是文件的修改，为什么这样说呢?
		你对一个文件进行了修改，然后add，之后再继续修改，commit之后你会发现第二次的修改并没有被保存到版本库中。

		这是因为你第二次修改是在工作区，暂存区并没有存储你的第二次修改，所以需要再add这个文件，再次commit才会生效。

		git diff HEAD -- readme.txt ：查看工作区和版本库里面最新版本的区别。
	
	2.5 撤销修改
		git checkout -- readme.txt
			一种是撤销工作区的修改，就是让文件回到最后一次commit或者add的状态。
	
	2.6 删除文件
		一般情况下，你是在文件管理器中删除文件，或者通过rm命令来删除，例如：rm demo.txt。

		如果想使删除文件在缓存区生效，你可以使用git rm删除文件，再commit操作。

		如果是操作错误不想删除文件，那么可以用git checkout -- filename来将文件回复，前提你版本库中还有该文件信息。

3. 操作远程仓库
	3.1 添加远程仓库
		你在github服务器上面创建了一个远程仓库，现在你想让本地仓库跟远程仓库关联起来并进行同步，那么可以通过remote命名来关联仓库。

		关联：
			git remote add origin 版本库地址
			origin是远程库的名字，也可以改成别的。

		推送：
			git push -u origin master
			将本地内容推送到服务器，git push实际上是将当前master分支推送到远程。
			-u，将本地和远程仓库的mster分支关联起来，在以后的推送和拉去能简化命名。

		后续推送的简化命令：git push origin master

	3.2 克隆远程仓库
		创建远程仓库
			在github上面创建。
		
		克隆到本地
			git clone 远程仓库地址

4. 分支管理
	一个指针用于确定当前分支，另外一个指针用于确定当前提交点。

	我们知道每次提交都是一个时间点，git将这些时间点串联起来，就形成了一条时间线，这个时间线就是一条分支，而master主分支。

	master分支是一条线，git用master指向最新的提交，再用HEAD指向master，这样就能确定当前分支和当前分支的提交点。

	分支的创建
		当你创建了一条新的分支，例如dev分支，那么git就新增了一个dev指针，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。

		当分支创建后，对工作区的修改和提交就是针对dev分支了，比较新提交一次后，dev指针向前移动一步，而master指针不变。

		checkout -b dev
			-b表示创建并切换，相当于git branch dev、git checkout dev俩条语句。

		git branch
			查看当前分支

		checkout 分支名
			例如：git checkout master，切换会主分支。

	分支合并
		假如在dev分支上的工作完成后，如何合并到master分支上？
		将master指向当前dev分支的提交，就可以进行合并。

		git checkout master：切换到主分支
		git merge dev：在master分支上，合并dev分支

		如果俩个分支没有进行合并，分支之间的内容是不互相影响的。
		Fast-forward：合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

	分支删除
		删除分支，就是删除指针，例如删除dev分支，那么就只剩下master指针了。
		git branch -d dev：删除分支

	分支冲突
		在多条分支上如果对同一个文件进行操作，再次合并分支的时候。便会起分支合并冲突。

		当发生冲突后，可以打开发生冲突的文件，对其内容进行修改，再次add和commit，分支便合并成功了。

		这种合并是快速合并，即fast-merge

	分支管理策略


5. 多人协调
	5.1 推送分支
		git push origin master
		origin：远程仓库名
		master：分支名

		即将该分支上的所有本地推送到远程服务器分支上。

	5.2 推送冲突
		不同的客户端对服务器上同一条分支进行推送内容，这样可能会产生推送推图。
		解决：把要提交的分支抓取下来，与本地分支进行合并，解决冲突再推送。

		


 */

// 解决版本库冲突
// fetch和pull俩种抓取方式